import java.nio.file.Files
import org.opensearch.gradle.test.RestIntegTestTask

buildscript {
    ext {
        opensearchVersion = "2.2.0"
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearchVersion}"
        classpath "com.github.breadmoirai:github-release:2.3.7"
    }
}

//plugins {
//   id "co.riiid.gradle" version "0.4.2"
//  // the old co.riiid.gradle is not gradle 7.0 compatible
//  // id "com.github.humblerookie.gradle" version "0.4.4"
//  id "com.github.ben-manes.versions" version '0.36.0'
//}

repositories {
  mavenCentral()
}

group = 'org.opensearch.plugin'
version = "${opensearchVersion}.0"

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.testclusters'
apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'opensearch.pluginzip'
apply plugin: "com.github.breadmoirai.github-release"

allprojects {
     plugins.withId('java') {
        targetCompatibility = JavaVersion.VERSION_11
        sourceCompatibility = JavaVersion.VERSION_11
    }
}

opensearchplugin {
  name = 'opensearch-analysis-ik'
  description = 'IK Analysis for OpenSearch'
  classname = 'org.opensearch.plugin.analysis.ik.AnalysisIkPlugin'
  licenseFile = rootProject.file('LICENSE.txt')
  noticeFile = rootProject.file('NOTICE.txt')
}
// This requires an additional Jar not published as part of build-tools
loggerUsageCheck.enabled = false

// No need to validate pom, as we do not upload to maven/sonatype
validateNebulaPom.enabled = false

// In this section you declare the dependencies for your production and test code
dependencies {

//  implementation 'org.apache.httpcomponents:httpcomponents-client:4.5.13'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.apache.httpcomponents:httpcore:4.4.12'
  //runtimeOnly 'org.apache.logging.log4j:log4j-api:2.3'
/*
  testCompileOnly 'org.powermock:powermock-api-mockito:1.6.2'
  testCompileOnly 'nl.jqno.equalsverifier:equalsverifier:1.7.5'
  testCompileOnly 'com.openpojo:openpojo:0.8.1'
*/
}

bundlePlugin {
    from('config') {
        into 'config/'
    }
}

// ignore javadoc warnings for now
tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
}


if (!System.getProperty('GITHUB_TOKEN', '')) {
throw new Exception('Missing property GITHUB_TOKEN')
}

// check if zip file is there
if(file("build/distributions/opensearch-analysis-ik-${version}.zip").exists()){
  // rename zip file
  def currentVersion = version.replace('-SNAPSHOT', '')
  def filename = "build/distributions/opensearch-analysis-ik-${version}.zip"
  Files.copy(file("build/distributions/opensearch-analysis-ik-${version}.zip").toPath(), file(filename).toPath())

  // configuration
  githubRelease {
      owner 'aparo'
      repo 'opensearch-analysis-ik'
      token System.getProperty('GITHUB_TOKEN')
      tagName currentVersion
      releaseName currentVersion
      targetCommitish = 'main'
      body ""
  }


}

test {
     dependsOn 'cleanTest'
     include '**/*Tests.class'
   //To enable this fail fast behavior so even a one unit test fail it keeps running 
        failFast = true

      // Give a different location to the gradle html reports in a folder called gradlehtmlReports
    reports.html.enabled = true
    reports.html.setDestination(file("$projectDir/gradlehtmlReports"))
}

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

testClusters.integTest {
    testDistribution = "INTEG_TEST"

    // This installs our plugin into the testClusters
    plugin(project.tasks.bundlePlugin.archiveFile)
}

run {
    useCluster testClusters.integTest
}
